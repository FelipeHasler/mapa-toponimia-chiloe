setwd("C:/Users/keche/Downloads/Mapa-20250914T195206Z-1-001/Mapa")
# ---- 0) Paquetes ----
library(readr)
library(dplyr)
library(leaflet)
library(htmlwidgets)
library(commonmark)  # para convertir Markdown -> HTML
suppressWarnings({
has_stringi <- requireNamespace("stringi", quietly = TRUE)
})
# ---- 0.1) Definir carpeta de trabajo ----
setwd("C:/Users/galla/Desktop/Mapa")  # Ajusta tu usuario si es necesario
getwd()  # Verifica que estás en la carpeta correcta
# ---- 1) Cargar datos ----
df <- read_csv("toponimia_chiloe.csv") |>
mutate(
origen = tolower(trimws(origen)),
nombre = trimws(nombre)
) |>
# Normalizar origen a 3 categorías
mutate(
origen = case_when(
origen %in% c("williche","mapuche","mapudungun","mapudugun","mapudungu") ~ "Williche",
origen %in% c("chono","chon","chon'o")                                   ~ "Chono",
origen %in% c("inseguro","indeciso","indecisos","indeterminado",
"mixto","hibrido","híbrido","por definir","?")             ~ "Inseguro",
TRUE ~ ifelse(is.na(origen) | origen == "", "Inseguro", origen)
)
)
# ---- 2) Slugify (ID único por topónimo) ----
slugify <- function(x) {
y <- if (has_stringi) stringi::stri_trans_general(x, "Latin-ASCII") else x
y <- tolower(y)
y <- gsub("[^a-z0-9]+", "-", y)
y <- gsub("(^-|-$)", "", y)
ifelse(nchar(y) == 0, "item", y)
}
if (!"slug" %in% names(df)) df$slug <- slugify(df$nombre)
df$slug <- ifelse(is.na(df$slug) | df$slug == "", slugify(df$nombre), df$slug)
# ---- 3) Preparar carpetas ----
dir.create("glosas_md", showWarnings = FALSE, recursive = TRUE)
dir.create("glosas",    showWarnings = FALSE, recursive = TRUE)
# ---- 4) Generar fichas glosas ----
if (!"glosa_url" %in% names(df)) df$glosa_url <- NA_character_
for (i in seq_len(nrow(df))) {
if (!is.na(df$glosa_url[i]) && nzchar(df$glosa_url[i])) next
slug_i <- df$slug[i]
nombre_i <- df$nombre[i]
origen_i <- df$origen[i]
lon_i <- df$lon[i]
lat_i <- df$lat[i]
md_path   <- file.path("glosas_md", paste0(slug_i, ".md"))
html_path <- file.path("glosas",    paste0(slug_i, ".html"))
if (!file.exists(md_path)) {
md_text <- paste0(
"# ", nombre_i, "\n\n",
"**Origen:** ", origen_i, "  \n",
"**Coordenadas:** ", round(lon_i, 4), ", ", round(lat_i, 4), "\n\n",
"## Glosa\n",
"Escribe aquí la glosa completa del topónimo *", nombre_i, "*. ",
"Puedes usar **negritas**, *itálicas*, listas, tablas y enlaces.\n\n",
"## Notas / Bibliografía\n",
"- Fuente 1\n- Fuente 2\n"
)
writeLines(md_text, md_path, useBytes = TRUE)
}
md <- paste(readLines(md_path, warn = FALSE, encoding = "UTF-8"), collapse = "\n")
glosa_html <- commonmark::markdown_html(md)
page <- paste0(
"<!DOCTYPE html><html lang='es'><head><meta charset='UTF-8'>",
"<meta name='viewport' content='width=device-width, initial-scale=1.0'>",
"<title>", nombre_i, " — Glosa</title>",
"<style>",
"body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Arial,sans-serif;",
"margin:2rem;line-height:1.6;color:#1c1c1c;max-width:900px}",
"h1{margin-top:0} .tag{display:inline-block;background:#eef2ff;color:#1f3c88;",
"padding:.15rem .5rem;border-radius:.5rem;font-size:.9rem;margin-left:.4rem}",
".meta{color:#555;margin:.5rem 0 1rem 0}",
"a{color:#1f3c88;text-decoration:none} a:hover{text-decoration:underline}",
"hr{border:none;border-top:1px solid #eee;margin:1.2rem 0}",
"</style></head><body>",
"<h1>", nombre_i, "<span class='tag'>", toupper(origen_i), "</span></h1>",
"<div class='meta'>Coordenadas: ", round(lon_i,4), ", ", round(lat_i,4), "</div>",
"<hr/>",
glosa_html,
"<hr/><p style='color:#777'>",
"Página generada desde ‘glosas_md/", slug_i, ".md’. Edita ese archivo para actualizar esta glosa.",
"</p></body></html>"
)
writeLines(page, html_path, useBytes = TRUE)
df$glosa_url[i] <- html_path
}
# ---- 5) Paleta de colores ----
pal <- colorFactor(
palette = c("Williche" = "#2B6CB0", "Chono" = "#27AE60", "Inseguro" = "#F2C94C"),
domain  = c("Williche", "Chono", "Inseguro")
)
# ---- 6) Crear mapa ----
mapa <- leaflet(df) |>
addProviderTiles(providers$CartoDB.Positron) |>
setView(lng = -73.8, lat = -42.7, zoom = 8) |>
addCircleMarkers(
lng = ~lon, lat = ~lat,
layerId = ~slug,
radius = 6,
color = ~pal(origen),
stroke = FALSE, fillOpacity = 0.9,
label = ~nombre,
popup = ~paste0(
"<b>", nombre, "</b><br>",
"Origen: ", origen, "<br>",
"<a href='", glosa_url, "' target='_blank'>Abrir glosa en nueva pestaña</a>"
)
) |>
addLegend(
position = "bottomleft",
pal = pal,
values = ~origen,
title = "Origen del topónimo"
)
# ---- 7) Exportar mapa ----
saveWidget(mapa, "mapa_toponimia_chiloe.html", selfcontained = TRUE)
browseURL("mapa_toponimia_chiloe.html")
setwd("~/GitHub/mapa-toponimia-chiloe")
# ---- 0) Paquetes ----
library(readr)
library(dplyr)
library(leaflet)
library(htmlwidgets)
library(commonmark)  # para convertir Markdown -> HTML
suppressWarnings({
has_stringi <- requireNamespace("stringi", quietly = TRUE)
})
# ---- 1) Cargar datos (rutas relativas, sin setwd) ----
# Asegúrate de que tu CSV esté en data/toponimia_chiloe.csv
df <- read_csv("data/toponimia_chiloe.csv") |>
mutate(
origen = tolower(trimws(origen)),
nombre = trimws(nombre)
) |>
# Normalizar origen a 3 categorías
mutate(
origen = case_when(
origen %in% c("williche","mapuche","mapudungun","mapudugun","mapudungu") ~ "Williche",
origen %in% c("chono","chon","chon'o")                                   ~ "Chono",
origen %in% c("inseguro","indeciso","indecisos","indeterminado",
"mixto","hibrido","híbrido","por definir","?")             ~ "Inseguro",
TRUE ~ ifelse(is.na(origen) | origen == "", "Inseguro", origen)
)
)
# ---- 2) Slugify (ID único por topónimo) ----
slugify <- function(x) {
y <- if (has_stringi) stringi::stri_trans_general(x, "Latin-ASCII") else x
y <- tolower(y)
y <- gsub("[^a-z0-9]+", "-", y)
y <- gsub("(^-|-$)", "", y)
ifelse(nchar(y) == 0, "item", y)
}
if (!"slug" %in% names(df)) df$slug <- slugify(df$nombre)
df$slug <- ifelse(is.na(df$slug) | df$slug == "", slugify(df$nombre), df$slug)
# ---- 3) Preparar carpetas de salida (quedarán versionadas en el repo) ----
dir.create("glosas_md", showWarnings = FALSE, recursive = TRUE)
dir.create("glosas",    showWarnings = FALSE, recursive = TRUE)
# ---- 4) Generar fichas glosas ----
if (!"glosa_url" %in% names(df)) df$glosa_url <- NA_character_
for (i in seq_len(nrow(df))) {
if (!is.na(df$glosa_url[i]) && nzchar(df$glosa_url[i])) next
slug_i   <- df$slug[i]
nombre_i <- df$nombre[i]
origen_i <- df$origen[i]
lon_i    <- df$lon[i]
lat_i    <- df$lat[i]
md_path   <- file.path("glosas_md", paste0(slug_i, ".md"))
html_path <- file.path("glosas",    paste0(slug_i, ".html"))
if (!file.exists(md_path)) {
md_text <- paste0(
"# ", nombre_i, "\n\n",
"**Origen:** ", origen_i, "  \n",
"**Coordenadas:** ", round(lon_i, 4), ", ", round(lat_i, 4), "\n\n",
"## Glosa\n",
"Escribe aquí la glosa completa del topónimo *", nombre_i, "*. ",
"Puedes usar **negritas**, *itálicas*, listas, tablas y enlaces.\n\n",
"## Notas / Bibliografía\n",
"- Fuente 1\n- Fuente 2\n"
)
writeLines(md_text, md_path, useBytes = TRUE)
}
md <- paste(readLines(md_path, warn = FALSE, encoding = "UTF-8"), collapse = "\n")
glosa_html <- commonmark::markdown_html(md)
page <- paste0(
"<!DOCTYPE html><html lang='es'><head><meta charset='UTF-8'>",
"<meta name='viewport' content='width=device-width, initial-scale=1.0'>",
"<title>", nombre_i, " — Glosa</title>",
"<style>",
"body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Arial,sans-serif;",
"margin:2rem;line-height:1.6;color:#1c1c1c;max-width:900px}",
"h1{margin-top:0} .tag{display:inline-block;background:#eef2ff;color:#1f3c88;",
"padding:.15rem .5rem;border-radius:.5rem;font-size:.9rem;margin-left:.4rem}",
".meta{color:#555;margin:.5rem 0 1rem 0}",
"a{color:#1f3c88;text-decoration:none} a:hover{text-decoration:underline}",
"hr{border:none;border-top:1px solid #eee;margin:1.2rem 0}",
"</style></head><body>",
"<h1>", nombre_i, "<span class='tag'>", toupper(origen_i), "</span></h1>",
"<div class='meta'>Coordenadas: ", round(lon_i,4), ", ", round(lat_i,4), "</div>",
"<hr/>",
glosa_html,
"<hr/><p style='color:#777'>",
"Página generada desde ‘glosas_md/", slug_i, ".md’. Edita ese archivo para actualizar esta glosa.",
"</p></body></html>"
)
writeLines(page, html_path, useBytes = TRUE)
df$glosa_url[i] <- html_path
}
# ---- 5) Paleta de colores ----
pal <- colorFactor(
palette = c("Williche" = "#2B6CB0", "Chono" = "#27AE60", "Inseguro" = "#F2C94C"),
domain  = c("Williche", "Chono", "Inseguro")
)
# ---- 6) Crear mapa ----
mapa <- leaflet(df) |>
addProviderTiles(providers$CartoDB.Positron) |>
setView(lng = -73.8, lat = -42.7, zoom = 8) |>
addCircleMarkers(
lng = ~lon, lat = ~lat,
layerId = ~slug,
radius = 6,
color = ~pal(origen),
stroke = FALSE, fillOpacity = 0.9,
label = ~nombre,
popup = ~paste0(
"<b>", nombre, "</b><br>",
"Origen: ", origen, "<br>",
"<a href='", glosa_url, "' target='_blank' rel='noopener'>Abrir glosa en nueva pestaña</a>"
)
) |>
addLegend(
position = "bottomleft",
pal = pal,
values = ~origen,
title = "Origen del topónimo"
)
# ---- 7) Exportar mapa (self-contained y nombre de salida) ----
htmlwidgets::saveWidget(
widget = mapa,
file   = "index.html",      # <- clave para GitHub Pages
selfcontained = TRUE        # <- todo embebido, más simple para publicar
)
# (sin browseURL en CI)
# (sin browseURL en CI)
